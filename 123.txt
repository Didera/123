//database initalization

spring.application.name= -------

// spring.thymeleaf.cache=false

spring.datasource.url=  - - - -  jdbc:h2:file:./data/flightsDB
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console 

//service - business logic
//model - getters,setters, constructors
//controller - HTTP requests GET,SET,POST,DELETE
//repository - Database access layer

//models
@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Flight {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int flightId;

    private String flightNumber;
    private String departure;
    private String destination;
    private LocalDateTime departureTime;
    private LocalDateTime arrivalTime;
    private String status;

    @OneToMany(mappedBy = "flight")
    @JsonManagedReference
    private List<Passenger> passengers;


}
@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Passenger {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int passengerId;

    private String name;
    private String passportNumber;

    @ManyToOne
    @JoinColumn(name = "flight_id", nullable = false)
    @JsonBackReference
    private Flight flight;

}

//repositories

@Repository
public interface FlightReposiitory extends JpaRepository<Flight, Integer> {
}

@Repository
public interface PassengerRepository extends JpaRepository<Passenger, Integer> {

}

//service

@Service
public class FlightService {

    @Autowired
    private FlightReposiitory flightRepo;

    public List<Flight> getAllFlights() {
        return flightRepo.findAll();
    }

    public Flight getFlightById(int id) {
        return flightRepo.findById(id).orElse(null);
    }

    public void addFlight(Flight flight) {
        flightRepo.save(flight);
    }

    public void deleteFlight(int id){
        flightRepo.deleteById(id);
    }
}
@Service
public class PassengerService {

    @Autowired
    private PassengerRepository passengerRepo;

    public List<Passenger> getAllPassengers() {
        return passengerRepo.findAll();
    }

    public Passenger getPassengerById(int id){
        return passengerRepo.findById(id).orElse(null);
    }

    public void addPassenger(Passenger passenger){
        passengerRepo.save(passenger);
    }

    public void deletePassenger(int id) {
        passengerRepo.deleteById(id);
    }


}

//controllers

@RestController
@RequestMapping("/api/flights")
public class FlightController {


    @Autowired
    private final FlightService flightService;


    public FlightController(FlightService flightService) {
        this.flightService = flightService;
    }

    @GetMapping
    public List<Flight> getAllFlights() {
        return flightService.getAllFlights();
    }

    @GetMapping("/{id}")
    public Flight getFlightById(@PathVariable int id) {
        return flightService.getFlightById(id);
    }


    @PostMapping("/add")
    public void addFlight(@RequestBody Flight flight) {
        flightService.addFlight(flight);
    }

    @DeleteMapping("/delete/{id}")
    public void deleteFlight(@PathVariable int id){
        flightService.deleteFlight(id);
    }
}
@RestController
@RequestMapping("/api/passengers")
public class PassengerController {
    
    private final PassengerService passengerService;

    public PassengerController(PassengerService passengerService) {
        this.passengerService = passengerService;
    }

    @GetMapping
    public List<Passenger> getPassengers() {
        return passengerService.getAllPassengers();
    }

    @GetMapping("/{id}")
    public Passenger getPassengerById(@PathVariable int id){
        return passengerService.getPassengerById(id);
    }

    @PostMapping("/add")
    public void addPassenger(Passenger passenger){
        passengerService.addPassenger(passenger);
    }

    @DeleteMapping("/delete/{id}")
    public void deletePassenger(@PathVariable int id) {
        passengerService.deletePassenger(id);
    }
}

@Controller
public class HomeController {

    @GetMapping("/")
    public String home(Model model){
        model.addAttribute("foo", "foobarbaz");
        return "index";
    }
}

<dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
