//database initalization

spring.application.name= -------

// spring.thymeleaf.cache=false

spring.datasource.url=  - - - -  jdbc:h2:file:./data/flightsDB
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console 

//service - business logic
//model - getters,setters, constructors
//controller - HTTP requests GET,SET,POST,DELETE
//repository - Database access layer

//models
@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Airport {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int AirportId;

    private String Name;
    private String Country;
}

@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Flight {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private int FlightId;

    @ManyToOne
    @JoinColumn(name = "origin_airport_id")
    private Airport origin;

    @ManyToOne
    @JoinColumn(name = "destination_airport_id")
    private Airport destination;

    private Status status;

    @OneToMany(mappedBy = "flight")
    private List<Passenger> passengers;

}

@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
public class Passenger {
    @Id
    private int PassengerId;

    private String Name;

    @ManyToOne
    @JoinColumn(name = "flightId")
    private Flight flight;
}

public enum Status {
    SCHEDULED, DEPARTED, ARRIVED, DELAYED, CANCELLED
}

//repositories
@Repository
public interface AirportRepository extends JpaRepository<Airport,Integer> {
}
public interface FlightRepository extends JpaRepository<Flight,Integer> {
}
public interface PassengerRepository extends JpaRepository<Passenger,Integer> {
}

//services

@Service
public class FlightService {

    @Autowired
    private FlightRepository flightRepository;

    public List<Flight> getAllFlights(){
        return flightRepository.findAll();
    }

    public Flight getFlightById(int id){
        return flightRepository.findById(id).orElse(null);
    }

    public void addFlight(Flight flight){
        flightRepository.save(flight);
    }

    public void deleteFLight(int id){
        flightRepository.deleteById(id);
    }
}

//controllers
@RestController
@RequestMapping("/api/flight")
public class FlightController {

    @Autowired
    private FlightService flightService;

    @GetMapping
    public List<Flight> getAllFlights(){
        return flightService.getAllFlights();
    }

    @GetMapping("/{id}")
    public Flight getFlightById(@PathVariable int id){
        return flightService.getFlightById(id);
    }

    @PostMapping("/add")
    public void addFlight(@RequestBody Flight flight){
        flightService.addFlight(flight);
    }

    @DeleteMapping("{id}")
    public void deleteFlight(@PathVariable int id){
        flightService.deleteFLight(id);
    }

}

//custom queries

@Query("SELECT f FROM Flight f WHERE f.status = ?1")
List<Flight> findByStatus(String status);

@Query("SELECT f FROM Flight f WHERE f.status = :status AND f.destination = :destination")
List<Flight> findByStatusAndDestination(@Param("status") String status, @Param("destination") String destination);

<dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
